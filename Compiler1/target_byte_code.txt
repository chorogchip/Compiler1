
target byte code to which input program will compiled

there is no stack or heap or data.
but only static address memory exists.
all memory and data types are 32 bit.

every byte code has static 80 bit length.
16 bit - operation
32 bit - operand1
32 bit - operand2

before the array of codes, 1 integer of 32bit is given.
that integer means total size of memory which will be used.
if a number equal or bigger than that number above is used as variable address,
the program explodes.
for example, if number '80' is given at the first position,
0, 1, 2, ...,79 is available for variable address. but 80, 81, ... is not available.

comment may not be implemented in byte code compiler.

<operation> ->
	<name> [<operand>] [<operand>] [; <comment>]
<operand> -> 0-9 (32bit decimal)

<operations>
A, B : variable
C : const number

0x0001 nop ; do nothing
0x0002 end ; end program

0x0011 jmp C ; jump to C
0x0012 jif C B ; jump to C if B is not 0
0x0012 jnf C B ; jump to C if B is 0

0x0021 moc A C : move C to A.
0x0022 mov A B ; move B to A. A = B;
0x0023 mop A B ; move value of variable whose address is B to A. A = *B;
0x0024 moa A B ; move B to variable whose address is value of A. *A = B;

0x0031 neg A ; negate A
0x0032 not A ; A = 1 iff A is 0, else A = 0

0x0041 add A B ; add B to A
0x0042 sub A B
0x0043 mul A B
0x0044 div A B
0x0045 mod A B
0x0046 shl A B
0x0047 shr A B
0x0048 and A B
0x0049 orr A B
0x004A xor A B

0x0061 eql A B ; if equal then A = 1 else A = 0
0x0062 neq A B ; if equal then A = 0 else A = 1
0x0063 cmp A B ; if A <  B then A = 1 else A = 0
0x0064 cme A B ; if A <= B then A = 1 else A = 0
0x0065 rcp A B ; if A >  B then A = 1 else A = 0
0x0066 rce A B ; if A >= B then A = 1 else A = 0

0x0091 rdi A ; read int value and store in A
0x0092 rdc A ; read char value and store in A
0x0093 get A B read char and store starting from variable whose address is value of A
					until '\n' is put or char count is over B
0x0094 wri A ; write A regarded as int value
0x0095 wrc A ; write A regarded as char value
0x0096 put A ; write char values until '\0'
					starting from variable whose address is value of A

example program
<hello.c>

int n;
scanf("%d", &n);
for (int i = 2; i * i <= n; ++i)
	if (n % i == 0) goto N;
printf("%d", 1);
goto E;
N: printf("%d", 0);
E:;

<hello.cmp1bytec>

// TODO rewrite this wrong program
6
0x01: rdi 1
0x02: mov 2 2
0x03: mov 3 2
0x04: mov 4 3
0x05: mul 4 3
0x06: cme 4 1
0x07: jnf 13 4
0x08: mov 5 1
0x09: mod 5 2
0x0A: jnf 15 5
0x0B: add 2 1
0x0C: jmp 3
0x0D: wri 1
0x0E: jmp 16
0x0F: wri 0
0x10: end

<hello.cmp1byte>

0x00000006
0x0091 0x00000001 0x00000000
0x0021 0x00000002 0x00000002
...
